import sklearn.model_selection as model_selectionimport _config_grid_searchimport numpy as npimport osclass GridSearch():    def __init__(self, estimator, hyperparameter_space,                 dataset_name, verbose=0):        self.cv = _config_grid_search.cv_folds                        self.gs = model_selection.GridSearchCV(                 estimator, hyperparameter_space,                 cv=self.cv,                 error_score=np.NaN,                                  verbose=0)                      self.estimator = estimator        self.dataset_name = dataset_name                        def fit(self, X, y):        file_name = "results"+os.sep+type(self.estimator).__name__+"_GridSearch_"+self.dataset_name+".res"        f = open(file_name, "w")                        f.write("# Parameter search: Grid Search (scikit-learn)\n"+                 "# Dataset: "+str(self.dataset_name)+"\n"+                "# Estimator: "+type(self.estimator).__name__+"\n")                               f.write("# Cross Validation: "+str(self.cv)+"\n")        f.write("#\n")        f.close()                self.gs.fit(X, y)        f = open(file_name, "a")                                              f.write("# Grid scores on development set:\n\n")        means = self.gs.cv_results_['mean_test_score']        stds = self.gs.cv_results_['std_test_score']        for mean, std, params in zip(means, stds, self.gs.cv_results_['params']):            f.write("%0.3f (+/-%0.03f) for %r"                  % (mean, std * 2, params))            f.write("\n")        f.write("\n\n# Grid Search finished.")        f.close()        print("Grid Search finished.")        